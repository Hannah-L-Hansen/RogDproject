'demo'
'demo()'
> install.packages("biogas")
install.packages("biogas")
apple <- 7.23334
pear <- 7.233354
#y <- 47.456879
#Point 6 in assignment 01_R_basics - loan problem:
#l <- 15000
#i <- 0.045
#m <- 48
#p <- (((i/12) * ((1+(i/12))^m)) /
#((1+(1/12)^m)-1))*l
#Test of all.equal function
all.equal(apple, pear)
matrix(1:6, nrow=2)
matrix(1:6, ncol =3)
matrix(1:6, ncol =3, byrow=TRUE)
#option A
star_wars_matrix <- rbind(new_hope, empire_strikes, return_jedi)
rownames(star_wars_matrix) <- c("US", "non-US")
colnames(star_wars_matrix) <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
# option B
col <- c("US", "non-US")
row <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
rbind(new_hope, empire_strikes, return_jedi, names = c(col, row))
# option C
col <- c("US", "non-US")
row <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
star_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi),
byrow = TRUE, nrow = 3, dimnames = list(col, row))
# option D
col <- c("US", "non-US")
row <- c("A New Hope", "The Empire Strikes Back", "Return of the Jedi")
star_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi),
byrow = TRUE, nrow = 3, dimnames = list(row, col))
# US Box office vector
US_Box_office <- box[c(1,3,5)]
US_Box_office
# non US box office vector
non_US_box_office <- box[c(2,4,6)]
non_US_box_office
source('packages.R')
setwd("C:/Users/hanna/Dropbox/BMP kinetics/scripts")
source('packages.R')
source('functions.R')
source('load.R')
View(fvs)
View(setup)
source('biogas.R')
View(dat)
source('extract.R')
source('add_vars.R')
View(cbg)
View(biogas)
# Get BMP
bmp1p <- summBg(cbg, setup = setup, id.name = args$id.name, time.name = args$time.name,
descrip.name = 'substrate', inoc.name = 'BK',
inoc.m.name = args$inoc.m.name, norm.name = args$norm.name, when = '1p3d',
show.more = TRUE, extrap = TRUE, quiet = TRUE)
source('packages.R')
source('functions.R')
source('load.R')
source('biogas.R')
View(cbg)
source('packages.R')
source('functions.R')
source('load.R')
source('biogas.R')
View(cbg)
View(dat)
View(bmp1p)
View(biogas)
if(is.na(comp)) comp <- NULL
if(args$dat.type == 'vol') {
cbg <- cumBg(biogas, comp = comp, temp = args$temp, pres = args$pres,
interval = args$interval,
data.struct = args$data.struct,
id.name = args$id.name,
time.name = args$time.name,
dat.name = args$dat.name,
comp.name = args$comp.name,
extrap = TRUE,
unit.pres = args$unit.pres,
pres.std = biogas:::unitConvert(1, unit = 'atm', to = args$unit.pres),
addt0 = TRUE
)
} else if(args$dat.type == 'pres') {
cbg <- cumBg(biogas, dat.type = 'pres', comp = comp, temp = args$temp,
interval = args$interval,
data.struct = args$data.struct,
id.name = args$id.name,
time.name = args$time.name,
headspace = setup,
vol.hs.name = args$vol.hs.name,
pres.resid = args$pres.resid,
pres.init = args$pres.init,
pres.amb = args$pres.amb,
absolute = args$absolute,
temp.init = args$temp.init,
dat.name = args$dat.name,
comp.name = args$comp.name,
cmethod = args$cmethod,
unit.pres = args$unit.pres,
pres.std = biogas:::unitConvert(1, unit = 'atm', to = args$unit.pres),
extrap = TRUE,
addt0 = TRUE
)
} else if(args$dat.type == 'mass') {
cbg <- cumBg(biogas, dat.type = 'mass', temp = args$temp, pres = args$pres,
data.struct = args$data.struct,
id.name = args$id.name, time.name = args$time.name,
dat.name = args$dat.name, comp.name = args$comp.name,
temp.init = args$temp.init,
headspace = setup, vol.hs.name = args$vol.hs, headcomp = 'N2',
extrap = TRUE,
unit.pres = args$unit.pres,
pres.std = biogas:::unitConvert(1, unit = 'atm', to = args$unit.pres),
addt0 = TRUE)
}
setup <- dat[[i]][['setup']]
setup
comp <- dat[[i]][['comp']]
comp
if(is.null(args$cmethod) || is.na(args$cmethod)) args$cmethod <- 'removed'
"removed"
removed
?"if"
'removed'
View(args)
args$comp
args$temp
args$temp.init
View(args)
source('packages.R')
source('functions.R')
source('load.R')
ids
source('packages.R')
source('functions.R')
source('load.R')
ids
str(id)
str(ids)
View(dat)
View(args)
# Get file list
files1 <- list.files('../data')
# Omit temporary Excel files
# --> why is this nescesarry?? if someone is writing in the data while you are using the code or..?
files1 <- files1[!grepl('~', files1)]
# Get institutes ()
ids <- gsub('\\.xlsx', '', files1)
names(files1) <- ids
dat <- list()
for(i in ids) {
dat[[i]] <- list()
# Read in data args
args <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 4, skip = 1))
# Change to vector
dnames <- args$arg
args <- as.list(args$val)
names(args) <- dnames
# Sort out comp argument  --> why do you use grepl and not just grep? grepl = logical vector returened, why is this nescesarry?
if(grepl('^[0-9]', args$comp)) args$comp <- as.numeric(args$comp) ##
if(grepl('^[0-9]', args$temp)) args$temp <- as.numeric(args$temp)
if(grepl('^[0-9]', args$pres)) args$pres <- as.numeric(args$pres)
# And others
args$temp.init <- as.numeric(args$temp.init)
args$pres.init <- as.numeric(args$pres.init)
args$pres.resid <- as.numeric(args$pres.resid)
args$pres.amb <- as.numeric(args$pres.amb)
args$interval <- as.logical(args$interval)
args$dry <- as.logical(args$dry)
args$absolute <- as.logical(args$absolute)
if(is.null(args$cmethod) || is.na(args$cmethod)) args$cmethod <- 'removed'  ## --> What does the "removed" stand for?
setup <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 1, skip = 1))
biogas <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 3, skip = 1))
## Sort out substrate names--use standard substrate names
#setup$substrate <- NA
#setup[setup[, args$descrip.name] == args$inoc.name, 'substrate'] <- 'Inoc'
#setup[grepl('A$', setup[, args$descrip.name]), 'substrate'] <- 'SA'
#setup[grepl('B$', setup[, args$descrip.name]), 'substrate'] <- 'SB'
#setup[grepl('C$', setup[, args$descrip.name]), 'substrate'] <- 'SC'
#setup[grepl('cel', setup[, args$descrip.name], ignore.case = TRUE), 'substrate'] <- 'CEL'
# unit.pres
if(is.na(args$unit.pres)) {
args$unit.pres <- 'atm'
}
# Add fixed VS concentrations
fvs <- data.frame(substrate = c('CEL',   'SA', 'SB', 'SC', 'BK'),
c.vs2.subf = c(0.948, 0.829, 0.865, 0.810, 0.0))
setup <- merge(setup, fvs, by = 'substrate')
setup$m.sub.vs <- setup$c.vs2.subf*setup$m.sub
# Get inoc VS
setup$c.vs2.inoc <- mean(setup[setup$substrate == 'BK', 'c.TS']/100 * setup[setup$substrate == 'BK', 'c.VS']/100, na.rm = TRUE)
setup$m.inoc.vs <- setup$c.vs2.inoc*setup$m.inoc
setup$ISR <- setup$m.inoc.vs/setup$m.sub.vs
dat[[i]][['setup']] <- as.data.frame(setup)
dat[[i]][['biogas']] <- as.data.frame(biogas)
dat[[i]][['args']] <- args
# No comp data frame for constant comp
# Otherwise comp data frame is called comp (from second tab in spreadsheet)
if(!is.na(args$comp) & is.numeric(args$comp))  {
dat[[i]][['comp']] <- args$comp
} else if(args$data.struct == 'longcombo') {
dat[[i]][['comp']] <- NULL
} else {
comp <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 2, skip = 1))
dat[[i]][['comp']] <- comp
}
}
if(grepl('[0-9]+', args$pres)) args$pres <- as.numeric(args$pres)
# Get file list
files1 <- list.files('../data')
# Omit temporary Excel files
# --> why is this nescesarry?? if someone is writing in the data while you are using the code or..?
files1 <- files1[!grepl('~', files1)]
# Get institutes ()
ids <- gsub('\\.xlsx', '', files1)
names(files1) <- ids
dat <- list()
for(i in ids) {
dat[[i]] <- list()
# Read in data args
args <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 4, skip = 1))
# Change to vector
dnames <- args$arg
args <- as.list(args$val)
names(args) <- dnames
# Sort out comp argument  --> why do you use grepl and not just grep? grepl = logical vector returened, why is this nescesarry?
if(grepl('^[0-9]', args$comp)) args$comp <- as.numeric(args$comp) ##
if(grepl('^[0-9]', args$temp)) args$temp <- as.numeric(args$temp)
if(grepl('[0-9]+', args$pres)) args$pres <- as.numeric(args$pres)
# And others
args$temp.init <- as.numeric(args$temp.init)
args$pres.init <- as.numeric(args$pres.init)
args$pres.resid <- as.numeric(args$pres.resid)
args$pres.amb <- as.numeric(args$pres.amb)
args$interval <- as.logical(args$interval)
args$dry <- as.logical(args$dry)
args$absolute <- as.logical(args$absolute)
if(is.null(args$cmethod) || is.na(args$cmethod)) args$cmethod <- 'removed'  ## --> What does the "removed" stand for?
setup <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 1, skip = 1))
biogas <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 3, skip = 1))
## Sort out substrate names--use standard substrate names
#setup$substrate <- NA
#setup[setup[, args$descrip.name] == args$inoc.name, 'substrate'] <- 'Inoc'
#setup[grepl('A$', setup[, args$descrip.name]), 'substrate'] <- 'SA'
#setup[grepl('B$', setup[, args$descrip.name]), 'substrate'] <- 'SB'
#setup[grepl('C$', setup[, args$descrip.name]), 'substrate'] <- 'SC'
#setup[grepl('cel', setup[, args$descrip.name], ignore.case = TRUE), 'substrate'] <- 'CEL'
# unit.pres
if(is.na(args$unit.pres)) {
args$unit.pres <- 'atm'
}
# Add fixed VS concentrations
fvs <- data.frame(substrate = c('CEL',   'SA', 'SB', 'SC', 'BK'),
c.vs2.subf = c(0.948, 0.829, 0.865, 0.810, 0.0))
setup <- merge(setup, fvs, by = 'substrate')
setup$m.sub.vs <- setup$c.vs2.subf*setup$m.sub
# Get inoc VS
setup$c.vs2.inoc <- mean(setup[setup$substrate == 'BK', 'c.TS']/100 * setup[setup$substrate == 'BK', 'c.VS']/100, na.rm = TRUE)
setup$m.inoc.vs <- setup$c.vs2.inoc*setup$m.inoc
setup$ISR <- setup$m.inoc.vs/setup$m.sub.vs
dat[[i]][['setup']] <- as.data.frame(setup)
dat[[i]][['biogas']] <- as.data.frame(biogas)
dat[[i]][['args']] <- args
# No comp data frame for constant comp
# Otherwise comp data frame is called comp (from second tab in spreadsheet)
if(!is.na(args$comp) & is.numeric(args$comp))  {
dat[[i]][['comp']] <- args$comp
} else if(args$data.struct == 'longcombo') {
dat[[i]][['comp']] <- NULL
} else {
comp <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 2, skip = 1))
dat[[i]][['comp']] <- comp
}
}
# Loads all data
# Creates one large list named dat
# Get file list
files1 <- list.files('../data')
# Omit temporary Excel files
# --> why is this nescesarry?? if someone is writing in the data while you are using the code or..?
files1 <- files1[!grepl('~', files1)]
# Get institutes ()
ids <- gsub('\\.xlsx', '', files1)
names(files1) <- ids
dat <- list()
for(i in ids) {
dat[[i]] <- list()
# Read in data args
args <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 4, skip = 1))
# Change to vector
dnames <- args$arg
args <- as.list(args$val)
names(args) <- dnames
# Sort out comp argument  --> why do you use grepl and not just grep? grepl = logical vector returened, why is this nescesarry?
if(grepl('^[0-9]', args$comp)) args$comp <- as.numeric(args$comp) ##
if(grepl('^[0-9]', args$temp)) args$temp <- as.numeric(args$temp)
if(grepl('[0-9]+', args$pres)) args$pres <- as.numeric(args$pres)
# And others
args$temp.init <- as.numeric(args$temp.init)
args$pres.init <- as.numeric(args$pres.init)
if(grepl('[0-9]+', args$pres.resid)) args$pres.resid <- as.numeric(args$pres.resid)
args$pres.amb <- as.numeric(args$pres.amb)
args$interval <- as.logical(args$interval)
args$dry <- as.logical(args$dry)
args$absolute <- as.logical(args$absolute)
if(is.null(args$cmethod) || is.na(args$cmethod)) args$cmethod <- 'removed'  ## --> What does the "removed" stand for?
setup <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 1, skip = 1))
biogas <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 3, skip = 1))
## Sort out substrate names--use standard substrate names
#setup$substrate <- NA
#setup[setup[, args$descrip.name] == args$inoc.name, 'substrate'] <- 'Inoc'
#setup[grepl('A$', setup[, args$descrip.name]), 'substrate'] <- 'SA'
#setup[grepl('B$', setup[, args$descrip.name]), 'substrate'] <- 'SB'
#setup[grepl('C$', setup[, args$descrip.name]), 'substrate'] <- 'SC'
#setup[grepl('cel', setup[, args$descrip.name], ignore.case = TRUE), 'substrate'] <- 'CEL'
# unit.pres
if(is.na(args$unit.pres)) {
args$unit.pres <- 'atm'
}
# Add fixed VS concentrations
fvs <- data.frame(substrate = c('CEL',   'SA', 'SB', 'SC', 'BK'),
c.vs2.subf = c(0.948, 0.829, 0.865, 0.810, 0.0))
setup <- merge(setup, fvs, by = 'substrate')
setup$m.sub.vs <- setup$c.vs2.subf*setup$m.sub
# Get inoc VS
setup$c.vs2.inoc <- mean(setup[setup$substrate == 'BK', 'c.TS']/100 * setup[setup$substrate == 'BK', 'c.VS']/100, na.rm = TRUE)
setup$m.inoc.vs <- setup$c.vs2.inoc*setup$m.inoc
setup$ISR <- setup$m.inoc.vs/setup$m.sub.vs
dat[[i]][['setup']] <- as.data.frame(setup)
dat[[i]][['biogas']] <- as.data.frame(biogas)
dat[[i]][['args']] <- args
# No comp data frame for constant comp
# Otherwise comp data frame is called comp (from second tab in spreadsheet)
if(!is.na(args$comp) & is.numeric(args$comp))  {
dat[[i]][['comp']] <- args$comp
} else if(args$data.struct == 'longcombo') {
dat[[i]][['comp']] <- NULL
} else {
comp <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 2, skip = 1))
dat[[i]][['comp']] <- comp
}
}
# Loads all data
# Creates one large list named dat
# Get file list
files1 <- list.files('../data')
# Omit temporary Excel files
# --> why is this nescesarry?? if someone is writing in the data while you are using the code or..?
files1 <- files1[!grepl('~', files1)]
# Get institutes ()
ids <- gsub('\\.xlsx', '', files1)
names(files1) <- ids
dat <- list()
for(i in ids) {
dat[[i]] <- list()
# Read in data args
args <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 4, skip = 1))
# Change to vector
dnames <- args$arg
args <- as.list(args$val)
names(args) <- dnames
# Sort out comp argument  --> why do you use grepl and not just grep? grepl = logical vector returened, why is this nescesarry?
if(grepl('^[0-9]', args$comp)) args$comp <- as.numeric(args$comp) ##
if(grepl('^[0-9]', args$temp)) args$temp <- as.numeric(args$temp)
if(grepl('[0-9]+', args$pres)) args$pres <- as.numeric(args$pres)
# And others
args$temp.init <- as.numeric(args$temp.init)
args$pres.init <- as.numeric(args$pres.init)
if(grepl('[0-9]+', args$pres.resid)) args$pres.resid <- as.numeric(args$pres.resid)
args$pres.amb <- as.numeric(args$pres.amb)
args$interval <- as.logical(args$interval)
args$dry <- as.logical(args$dry)
args$absolute <- as.logical(args$absolute)
if(is.null(args$cmethod) || is.na(args$cmethod)) args$cmethod <- 'removed'  ## --> What does the "removed" stand for?
setup <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 1, skip = 1))
biogas <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 3, skip = 1))
## Sort out substrate names--use standard substrate names
#setup$substrate <- NA
#setup[setup[, args$descrip.name] == args$inoc.name, 'substrate'] <- 'Inoc'
#setup[grepl('A$', setup[, args$descrip.name]), 'substrate'] <- 'SA'
#setup[grepl('B$', setup[, args$descrip.name]), 'substrate'] <- 'SB'
#setup[grepl('C$', setup[, args$descrip.name]), 'substrate'] <- 'SC'
#setup[grepl('cel', setup[, args$descrip.name], ignore.case = TRUE), 'substrate'] <- 'CEL'
# unit.pres
if(is.na(args$unit.pres)) {
args$unit.pres <- 'atm'
}
# Add fixed VS concentrations
fvs <- data.frame(substrate = c('CEL',   'SA', 'SB', 'SC', 'BK'),
c.vs2.subf = c(0.948, 0.829, 0.865, 0.810, 0.0))
setup <- merge(setup, fvs, by = 'substrate')
setup$m.sub.vs <- setup$c.vs2.subf*setup$m.sub
# Get inoc VS
setup$c.vs2.inoc <- mean(setup[setup$substrate == 'BK', 'c.TS']/100 * setup[setup$substrate == 'BK', 'c.VS']/100, na.rm = TRUE)
setup$m.inoc.vs <- setup$c.vs2.inoc*setup$m.inoc
setup$ISR <- setup$m.inoc.vs/setup$m.sub.vs
dat[[i]][['setup']] <- as.data.frame(setup)
dat[[i]][['biogas']] <- as.data.frame(biogas)
dat[[i]][['args']] <- args
# No comp data frame for constant comp
# Otherwise comp data frame is called comp (from second tab in spreadsheet)
if(!is.na(args$comp) & is.numeric(args$comp))  {
dat[[i]][['comp']] <- args$comp
} else if(args$data.struct == 'longcombo') {
dat[[i]][['comp']] <- NULL
} else {
comp <- as.data.frame(read_xlsx(paste0('../data/',files1[i]), sheet = 2, skip = 1))
dat[[i]][['comp']] <- comp
}
}
View(setup)
source('packages.R')
source('functions.R')
source('load.R')
source('packages.R')
source('functions.R')
source('load.R')
source('biogas.R')
